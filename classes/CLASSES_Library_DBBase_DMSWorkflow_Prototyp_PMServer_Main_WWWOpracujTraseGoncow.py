# -*- coding: windows-1250 -*-
# saved: 2020/11/02 21:15:55

from CLASSES_Library_ICORBase_Interface_ICORInterface import *
import string
import time
import math

def QSExport(l,aqsfilename):
   fout=open(aqsfilename,'w')
   try:
      fout.write('%d %d\n'%(len(l),len(l)-1))
      for s,ax,ay in l:
         fout.write('%f %f\n'%(ax,ay))
      for i in range(len(l)-1):
         ax1,ay1=l[i][1],l[i][2]
         ax2,ay2=l[i+1][1],l[i+1][2]
         ad=math.sqrt((abs(ax1-ax2)**2)+(abs(ay1-ay2)**2))
         fout.write('%d %d %d\n'%(i,i+1,int(ad)))
   finally:
      fout.close()

class ICORAllPathRoute:
   def AllPathRun(self,mi,mj,amindist):
      adist=amindist
      apath=[]
      apath.append([self.lpoints[mi][0],self.lpoints[mi][1],self.lpoints[mi][2]])
      apath.append([self.lpoints[mj][0],self.lpoints[mj][1],self.lpoints[mj][2]])
      d={}
      d[mi]=1
      d[mj]=1
      cnt=2
      while cnt<self.n:
         w1=0
         for bdist1,bmi in self.mtable[mi]:
            if d.has_key(bmi):
               continue
            w1=1
            break
         w2=0
         for bdist2,bmj in self.mtable[mj]:
            if d.has_key(bmj):
               continue
            w2=1
            break
         if w1 and w2:
            if bdist1<bdist2:
               mi=bmi
               apath.insert(0,[self.lpoints[mi][0],self.lpoints[mi][1],self.lpoints[mi][2]])
               adist=adist+bdist1
            else:
               mj=bmj
               apath.append([self.lpoints[mj][0],self.lpoints[mj][1],self.lpoints[mj][2]])
               adist=adist+bdist2
         elif w1:
            mi=bmi
            apath.insert(0,[self.lpoints[mi][0],self.lpoints[mi][1],self.lpoints[mi][2]])
            adist=adist+bdist1
         elif w2:
            mj=bmj
            apath.append([self.lpoints[mj][0],self.lpoints[mj][1],self.lpoints[mj][2]])
            adist=adist+bdist2
         else:
            print '??? 1'
         d[mi]=1
         d[mj]=1
         cnt=cnt+1
      return adist,apath
   def AllPath(self,lpoints):
      t0=time.time()
      self.n=len(lpoints)
      self.dpoints={}
      self.lpoints=lpoints
      self.table=[]
      self.mtable=[]
      i=0
      mi,mj=0,0
      amindist=999999999.0
      for aname,x1,y1 in lpoints:
         paths=[]
         mpaths=[]
         j=0
         for aname,x2,y2 in lpoints:
            xdist=abs(x1-x2)
            ydist=abs(y1-y2)
            dist=math.sqrt((xdist*xdist)+(ydist*ydist))
            if dist>0.0 and dist<amindist:
               amindist=dist
               mi,mj=i,j
            paths.append(dist)
            mpaths.append([dist,j])
            j=j+1
         i=i+1
         mpaths.sort()
         self.table.append(paths)
         self.mtable.append(mpaths)
      t1=time.time()
      adist,lret=self.AllPathRun(mi,mj,amindist)
      t2=time.time()
#      print lret
      return adist,lret

class ICORTSP:
   def GetCost(self,old,new,verbose=0):
      o1,o2=old[0:2]
      return self.table[o1][new]+self.table[o2][new]-self.table[o1][o2]
   def TSPRun(self):
      links=[[0,1],[1,0]]
      curr=2
      while curr<self.n:
         best=links[0]
         src,dst=best
         bestCost=self.GetCost(links[0],curr)
         next=1
         while next<len(links):
            cost=self.GetCost(links[next],curr)
            if cost<bestCost:
               best,bestCost=links[next],cost
            next=next+1
         links.remove(best)
         links.append([curr,best[0]])
         links.append([curr,best[1]])
         curr=curr+1
      score=0.0
      ret=[]
      alast=0
      while links:
         i=0
         for a,b in links:
            if a==alast:
               ret.append([a,b])
               alast=b
               del links[i]
               break
            elif b==alast:
               alast=a
               ret.append([b,a])
               del links[i]
               break
            i=i+1
      score=0.0
      lret=[]
      for a,b in ret:
         lret.append([self.lpoints[a][0],self.lpoints[a][1],self.lpoints[a][2]])
         score=score+self.table[a][b]
#      lret.append([self.lpoints[b][0],self.lpoints[b][1],self.lpoints[b][2]])
      if 1:
         adist=0.0
         for i in range(len(lret)-1):
            ax1,ay1=lret[i][1],lret[i][2]
            ax2,ay2=lret[i+1][1],lret[i+1][2]
            ad=math.sqrt((abs(ax1-ax2)**2)+(abs(ay1-ay2)**2))
            adist=adist+ad
         aqsfilename='c:/icor/wwwroot/output/out.qs'
         fout=open(aqsfilename,'w')
         try:
            fout.write('%d %d\n'%(len(self.lpoints),len(ret)-1))
            for s,ax,ay in self.lpoints:
               fout.write('%f %f\n'%(ax,ay))
            for j1,j2 in ret:
               aname1,ax1,ay1=self.lpoints[j1][0],self.lpoints[j1][1],self.lpoints[j1][2]
               aname2,ax2,ay2=self.lpoints[j2][0],self.lpoints[j2][1],self.lpoints[j2][2]
               ad=math.sqrt((abs(ax1-ax2)**2)+(abs(ay1-ay2)**2))
               fout.write('%d %d %d\n'%(j1,j2,int(ad)))
         finally:
            fout.close()
         return adist,lret
      return score,lret
   def TSPPath(self,lpoints):
      t0=time.time()
      self.n=len(lpoints)
      self.dpoints={}
      self.lpoints=lpoints
      self.table=[]
      for aname,x1,y1 in lpoints:
         paths=[]
         for aname,x2,y2 in lpoints:
            xdist=abs(x1-x2)
            ydist=abs(y1-y2)
            dist=math.sqrt((xdist*xdist)+(ydist*ydist))
            paths.append(dist)
         self.table.append(paths)
      t1=time.time()
      adist,lret=self.TSPRun()
      t2=time.time()
#      print lret
      return adist,lret

def Test():
   aroute=ICORTSP()
   apoints=[
      ['p01',87949.97978,36755.19044],
      ['p02',88701.21825,37392.03632],
      ['p03',88845.84944,35893.92856],
      ['p04',88871.49062,36404.10249],
      ['p05',89117.55453,36383.07165],
      ['p06',87214.91034,37336.49837],
      ['p07',86708.12152,38041.29555],
      ['p08',89694.69392,37579.54889],
      ['p09',86993.05047,37827.36145],
      ['p10',86930.45138,36676.71232],
      ['p11',88121.90249,35771.00723],
      ['p12',89702.91416,38346.51245],
      ['p13',86500.77026,36102.57022],
      ['p14',89505.49929,36457.47884],
      ['p15',87324.90701,38460.52454],
      ['p16',89810.90278,37051.28489],
      ['p17',89551.82287,37610.27222],
      ['p18',90088.39826,36131.53437],
      ['p19',87728.49583,38518.09019],
      ['p20',87585.57214,35743.34511],
      ['p21',87526.48025,36594.01949],
      ['p22',87770.23608,38172.44375],
      ['p23',86227.41614,36600.02369],
      ['p24',88521.35764,38332.83292],
      ['p25',89368.80654,38521.48853],
      ['p26',86818.26233,37275.64477],
   ]
   apoints=[
['0',91461.85,35331.17],
['1',90454.76,34932.88],
['2',92035.82,34600.94],
['3',91655.07,34752.38],
['4',91997.76,34626.06],
['5',93588.49,34470.65],
['6',91997.76,34626.06],
['7',91056.26,34015.8],
['8',91673.58,34781.22],
['9',90357.72,35018.16],
['10',90788.58,35469.34],
['11',90357.72,35018.16],
['12',90454.76,34932.88],
['13',90644.75,34251.52],
['14',92620.42,35853.83],
['15',90367.49,35032.47],
['16',91997.76,34626.06],
['17',92015.77,34613.2],
['18',91800.86,35342.87],
['19',93317.28,33772.45],
['20',90454.76,34932.88],
['21',90977.02,34000.98],
['22',91674.63,34801.72],
['23',93345.19,33611.89],
['24',90231.17,35082.25],
['25',90380.71,35048.13],
['26',93948.66,32908.17],
['27',92015.77,34613.2],
['28',90357.72,35018.16],
['29',90554.85,34586.11],
['30',90357.72,35018.16],
['31',92025.38,34607.86],
['32',90380.71,35048.13],
['33',93546.43,34451.37],
['34',90589.11,34076.92],
['35',91800.86,35342.87],
['36',91674.63,34801.72],
['37',92045.68,34594.51],
['38',90914.87,34167.58],
['39',91282.82,34914.96],
['40',91517.46,34873.59],
['41',91673.58,34781.22],
['42',90231.17,35082.25],
['43',93632.46,34458.43],
['44',90777.78,34287.57],
['45',90454.76,34932.88],
['46',91364.16,35304.02],
['47',90380.71,35048.13],
['48',90426.53,35025.25],
['49',90832.61,35472.93],
['50',91412.12,35412.81],
['51',90919.79,35581.1],
['52',91461.85,35331.17],
['53',91983.85,35520.85],
['54',92237.97,36434.53],
['55',91461.85,35331.17],
['56',90702.98,34379.53],
['57',90764.64,35648.01],
['58',92288.8,34378.37],
['59',92256.32,35002.62],
['60',90231.17,35082.25],
['61',91743.6398,34690.1817],
['62',92627.53,36415.22],
['63',90396.69,35071.24],
['64',91162.79,35830.2],
['65',91083.3,35574.25],
['66',90636.62,35396.29],
['67',90231.17,35082.25],
['68',90636.62,35396.29],
['69',92453.81,35606.31],
['70',93027.68,34596.51],
['71',91461.85,35331.17],
['72',91461.85,35331.17],
['73',90792.06,34562.2],
['74',92956.32,33783.71],
['75',90367.49,35032.47],
['76',91517.46,34873.59],
['77',90787.33,35576.88],
['78',91461.85,35331.17],
['79',91162.79,35830.2],
['80',91162.79,35830.2],
['81',92620.42,35853.83],
['82',91162.79,35830.2],
['83',90967.12,35451.51],
['84',90764.64,35648.01],
['85',90919.79,35581.1],
['86',90764.64,35648.01],
['87',90999.47,34104.39],
['88',90611.8,34252.65],
['89',91246.78,34068.1],
['90',90396.69,35071.24],
['91',90231.17,35082.25],
['92',91800.86,35342.87],
['93',91412.12,35412.81],
['94',90919.79,35581.1],
['95',92871.52,33963.14],
['96',92662.26,34094.87],
['97',90474.52,35343.73],
['98',91461.85,35331.17],
['99',94028.38,32945.79],
['100',90919.79,35581.1],
['101',90857.57,35754.04],
['102',91743.6398,34690.1817],
['103',90967.12,35451.51],
['104',91969.24,34755.6],
['105',90919.79,35581.1],
['106',90967.12,35451.51],
['107',91461.85,35331.17],
['108',90503.33,35274.93],
['109',92627.53,36415.22],
['110',91306.97,34974.58],
['111',90919.79,35581.1],
['112',90636.62,35396.29],
['113',90636.62,35396.29],
['114',92627.53,36415.22],
['115',91566.7,35321.37],
['116',90967.12,35451.51],
['117',91461.85,35331.17],
['118',91162.79,35830.2],
['119',91461.85,35331.17],
['120',90426.53,35025.25],
['121',92956.32,33783.71],
['122',90919.79,35581.1],
['123',90636.62,35396.29],
['124',94028.38,32945.79],
['125',90231.17,35082.25],
['126',90919.79,35581.1],
['127',90396.69,35071.24],
['128',90914.87,34167.58],
['129',92071.62,34576.96],
['130',90380.71,35048.13],
['131',91412.12,35412.81],
['132',91299.11,34038],
['133',91461.85,35331.17],
['134',90722.33,34293.69],
['135',91461.85,35331.17],
['136',91062.36,35464.46],
['137',90967.12,35451.51],
['138',90599.16,34194.98],
['139',90919.79,35581.1],
['140',90919.79,35581.1],
['141',91162.79,35830.2],
['142',90231.17,35082.25],
['143',91412.12,35412.81],
['144',91062.36,35464.46],
['145',90396.69,35071.24],
['146',90967.12,35451.51],
['147',91461.85,35331.17],
['148',90967.12,35451.51],
['149',90919.79,35581.1],
['150',93027.68,34596.51],
['151',91461.85,35331.17],
['152',90857.57,35754.04],
['153',92956.32,33783.71],
['154',91062.36,35464.46],
['155',91461.85,35331.17],
['156',90357.72,35018.16],
['157',90919.79,35581.1],
['158',90636.62,35396.29],
['159',92288.8,34378.37],
['160',91412.12,35412.81],
['161',90724.45,34615.05],
['162',90947.4496,33953.883],
['163',90609.3,34236.08],
['164',90787.33,35576.88],
['165',91743.6398,34690.1817],
['166',91743.6398,34690.1817],
['167',91162.79,35830.2],
['168',91461.85,35331.17],
['169',90919.79,35581.1],
['170',90999.47,34104.39],
['171',90766.33,34567.97],
['172',92620.42,35853.83],
['173',91412.12,35412.81],
['174',90426.53,35025.25],
['175',90256.31,35148.7],
['176',90919.79,35581.1],
['177',90426.53,35025.25],
['178',91162.79,35830.2],
['179',92956.32,33783.71],
['180',90967.12,35451.51],
['181',90644.75,34251.52],
['182',91461.85,35331.17],
['183',90787.33,35576.88],
['184',91412.12,35412.81],
['185',91412.12,35412.81],
['186',92288.8,34378.37],
['187',90811.19,34449.45],
['188',92071.62,34576.96],
['189',90967.12,35451.51],
['190',92956.32,33783.71],
['191',91412.12,35412.81],
['192',90396.69,35071.24],
['193',90637.03,34487.45],
['194',91412.12,35412.81],
['195',91412.12,35412.81],
['196',90919.79,35581.1],
['197',92528.32,34052.91],
['198',92528.32,34052.91],
['199',90787.33,35576.88],
['200',90426.53,35025.25],
['201',91062.36,35464.46],
['202',91461.85,35331.17],
['203',91461.85,35331.17],
['204',90788.58,35469.34],
['205',90640.44,34998.27],
['206',92453.81,35606.31],
['207',91461.85,35331.17],
['208',90919.79,35581.1],
['209',90919.79,35581.1],
['210',91461.85,35331.17],
['211',92706.51,34082.64],
['212',90788.58,35469.34],
['213',90367.49,35032.47],
['214',90426.53,35025.25],
['215',90919.79,35581.1],
['216',92071.62,34576.96],
['217',90857.57,35754.04],
['218',90357.72,35018.16],
['219',92956.32,33783.71],
['220',90231.17,35082.25],
['221',90766.33,34567.97],
['222',92373.71,34295.37],
['223',92956.32,33783.71],
['224',91461.85,35331.17],
['225',92288.8,34378.37],
['226',91412.12,35412.81],
['227',91461.85,35331.17],
['228',91162.79,35830.2],
['229',90633.53,34201.97],
['230',90396.69,35071.24],
['231',91412.12,35412.81],
['232',90396.69,35071.24],
['233',90396.69,35071.24],
['234',90636.62,35396.29],
['235',91461.85,35331.17],
['236',91986.81,34633.58],
['237',90919.79,35581.1],
['238',90231.17,35082.25],
['239',92288.8,34378.37],
['240',91969.24,34755.6],
['241',91112.61,35709.26],
['242',92956.32,33783.71],
['243',90967.12,35451.51],
['244',90357.72,35018.16],
['245',92237.97,36434.53],
['246',90396.69,35071.24],
['247',93317.28,33772.45],
['248',90967.12,35451.51],
['249',92288.8,34378.37],
['250',91566.7,35321.37],
['251',90826.06,34109.08],
['252',90636.62,35396.29],
['253',91412.12,35412.81],
['254',90967.12,35451.51],
['255',92071.62,34576.96],
['256',91983.85,35520.85],
['257',90426.53,35025.25],
['258',90396.69,35071.24],
['259',90396.69,35071.24],
['260',90919.79,35581.1],
['261',92956.32,33783.71],
['262',92045.68,34594.51],
['263',92706.51,34082.64],
['264',91461.85,35331.17],
['265',92528.32,34052.91],
['266',90996.9553,35886.8628],
['267',93345.19,33611.89],
['268',92256.32,35002.62],
['269',91162.79,35830.2],
['270',90426.53,35025.25],
['271',92071.62,34576.96],
['272',92641.04,34094.77],
['273',91286.27,34100.67],
['274',90967.12,35451.51],
['275',92553.7,34128.33],
['276',92706.51,34082.64],
['277',90636.62,35396.29],
['278',90540.82,35251.69],
['279',91461.85,35331.17],
['280',90453.9,35146.7],
['281',90396.69,35071.24],
['282',91566.7,35321.37],
['283',91162.79,35830.2],
['284',91461.85,35331.17],
['285',92256.32,35002.62],
['286',90231.17,35082.25],
['287',91162.79,35830.2],
['288',92706.51,34082.64],
['289',92956.32,33783.71],
['290',90764.64,35648.01],
['291',90600.87,33958.9],
['292',90919.79,35581.1],
['293',92871.52,33963.14],
['294',92956.32,33783.71],
['295',92706.51,34082.64],
['296',90426.53,35025.25],
['297',90787.33,35576.88],
['298',92528.32,34052.91],
['299',90453.9,35146.7],
['300',90967.12,35451.51],
['301',90919.79,35581.1],
['302',91517.46,34873.59],
['303',92013.044,35276.3456],
['304',90919.79,35581.1],
['305',91461.85,35331.17],
['306',92956.32,33783.71],
['307',91901.96,35324.77],
['308',93050.66,34589.3],
['309',92071.62,34576.96],
['310',91674.63,34801.72],
['311',91162.79,35830.2],
['312',93345.19,33611.89],
['313',91461.85,35331.17],
['314',90764.64,35648.01],
['315',92871.52,33963.14],
['316',92237.97,36434.53],
['317',90764.64,35648.01],
['318',91517.46,34873.59],
['319',90426.53,35025.25],
['320',92045.68,34594.51],
['321',90788.58,35469.34],
['322',91162.79,35830.2],
['323',90817.28,34535.63],
['324',91378.7935,34866.9733],
['325',92956.32,33783.71],
['326',93317.28,33772.45],
['327',90426.53,35025.25],
['328',93278.34,33840.37],
['329',92462.02,34064.14],
['330',91162.79,35830.2],
['331',93079.83,34535.24],
['332',90787.33,35576.88],
['333',90426.53,35025.25],
['334',90919.79,35581.1],
['335',90231.17,35082.25],
['336',91461.85,35331.17],
['337',90396.69,35071.24],
['338',91461.85,35331.17],
['339',92071.62,34576.96],
['340',90396.69,35071.24],
['341',90947.4496,33953.883],
['342',91673.58,34781.22],
['343',90609.3,34236.08],
['344',91162.79,35830.2],
['345',90636.62,35396.29],
['346',92528.32,34052.91],
['347',90919.79,35581.1],
['348',91083.3,35574.25],
['349',90561.86,34648.77],
['350',92956.32,33783.71],
['351',91412.12,35412.81],
['352',90426.53,35025.25],
['353',90919.79,35581.1],
['354',92706.51,34082.64],
['355',93027.68,34596.51],
['356',92013.044,35276.3456],
['357',90919.79,35581.1],
['358',90764.64,35648.01],
['359',90231.17,35082.25],
['360',91461.85,35331.17],
['361',90826.06,34109.08],
['362',90764.64,35648.01],
['363',90857.57,35754.04],
['364',90626.48,34120.69],
['365',90380.71,35048.13],
['366',90919.79,35581.1],
['367',91112.61,35709.26],
['368',90231.17,35082.25],
['369',90396.69,35071.24],
['370',90682.15,34620.07],
['371',91517.46,34873.59],
['372',91997.76,34626.06],
['373',90857.57,35754.04],
['374',90919.79,35581.1],
['375',91461.85,35331.17],
['376',90626.48,34120.69],
['377',92956.32,33783.71],
['378',90274.34,34944.26],
['379',91162.79,35830.2],
['380',90636.62,35396.29],
['381',91162.79,35830.2],
['382',93325.54,33938.21],
['383',92706.51,34082.64],
['384',91461.85,35331.17],
['385',90380.71,35048.13],
   ]

   if 0:
      bpoints=[]
      for s,x,y in apoints:
         bpoints.append([s,x,y])
         bpoints.append([s+'1',x+333,y+337])
         bpoints.append([s+'2',x+127,y+238])
         bpoints.append([s+'3',x-2008,y+398])
         bpoints.append([s+'4',x-1078,y-67])
      apoints=bpoints
   adist,ret=aroute.TSPPath(apoints)
   print 'dist:',adist,len(apoints),len(ret)
#   for aname,ax1,ay1 in ret:
#       apunkt1='%0.5f %0.5f'%(ax1,ay1)
#       print aname,ax1,ay1
   QSExport(ret,'c:/icor/tmp/j/route1.qs')
   broute=ICORAllPathRoute()
   adist,ret=broute.AllPath(apoints)
   print 'dist:',adist,len(apoints),len(ret)
   QSExport(ret,'c:/icor/tmp/j/route2.qs')

def ICORMain(CID=-1, FieldName='', OID=-1, Value='', UID=-1):
   aclass=aICORDBEngine.Classes[CID]
   Test()
   return
   l1=string.split(Value,chr(255))
   apoints=[]
   for s in l1:
      l2=string.split(s,chr(254))
      l2[1]=float(l2[1])
      l2[2]=float(l2[2])
      apoints.append(l2)
   aroute=ICORTSP()
   adist,ret=aroute.TSPPath(apoints)
   l=[]
   for aname,ax1,ay1 in ret:
      l.append(aname+chr(254)+str(ax1)+chr(254)+str(ay1))
   return string.join(l,chr(255))



